#!/usr/bin/env node
/*eslint-disable */

var path = require('path');
var execFileSync = require('child_process').execFileSync;
var commander = require('commander');
var readPackageSync = require(path.resolve(
  __dirname,
  '../lib/utils/readPackageSync'
));
var verifyFiles = require(path.resolve(__dirname, '../lib/utils/verifyFiles'));

var args = [];
var chainscriptArgs = [];
var execChainscript = false;

process.argv.forEach(function(arg) {
  if (arg === '--') {
    execChainscript = true;
    return;
  }

  if (execChainscript) {
    chainscriptArgs.push(arg);
  } else {
    args.push(arg);
  }
});

function handleInput(input) {
  try {
    var json = JSON.parse(input);
    verifyFiles(process.cwd(), json, commander.root)
      .then(function() {
        process.stdout.write('Success\n');
        process.exit(0);
      })
      .catch(handleError);
  } catch(err) {
    handleError(err);
  }
}

function handleOutput(output) {
  process.stdout.write(JSON.stringify(output, null, '\t') + '\n');
  process.exit(0);
}

function handleError(err) {
  process.stderr.write(err.message + '\n');
  process.exit(1);
}

if (execChainscript) {
  try {
    var input = execFileSync(
      path.resolve(__dirname, './chainscript'),
      chainscriptArgs,
      {
        stdio: [process.stdin, null, process.stderr],
        encoding: 'utf8'
      }
    );
  } catch(err) {
    handleError(err);
  }
}

commander
  .version(readPackageSync('version'))
  .usage('[options] [-- chainscript args]')
  .option('-r, --root <path>', 'JSON root path')
  .parse(args);

if (input) {
  if (commander.args.length > 0) {
    commander.outputHelp();
    process.exit(1);
  }
  handleInput(input);
} else if (commander.args.length === 0) {
  process.stdin.setEncoding('utf8');

  var input = '';

  process.stdin.on('readable', function() {
    var chunk = process.stdin.read();

    if (chunk !== null) {
      input += chunk.toString();
    }
  });

  process.stdin.on('end', function() {
    input = input.replace(/\n$/, '');

    if (input.length) {
      handleInput(input);
    } else {
      commander.outputHelp();
      process.exit(1);
    }
  });
} else {
  handleInput(commander.args[0]);
}
