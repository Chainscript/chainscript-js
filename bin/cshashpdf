#!/usr/bin/env node
/*eslint-disable */

var path = require('path');
var execFileSync = require('child_process').execFileSync;
var commander = require('commander');
var readPackageSync = require(path.resolve(
  __dirname,
  '../lib/utils/readPackageSync'
));
var hashPDF = require(path.resolve(__dirname, '../lib/utils/hashPDF'));

function parseBool(v) {
  return v === 'true' || v === '1' ? true : false;
}

var paths;
var args = [];
var chainscriptArgs = [];
var execChainscript = false;

process.argv.forEach(function(arg) {
  if (arg === '--') {
    execChainscript = true;
    return;
  }

  if (execChainscript) {
    chainscriptArgs.push(arg);
  } else {
    args.push(arg);
  }
});

commander
  .version(readPackageSync('version'))
  .usage('[options] input [-- chainscript args]')
  .option('-a, --algorithm <name>', 'hash algorithm (default sha256)')
  .option('-r, --root <path>', 'JSON root path (default content.hash)')
  .parse(args);

if (commander.args.length !== 1) {
  commander.outputHelp();
  process.exit(1);
}

function handleOutput(output) {
  var str = JSON.stringify(output, null, '\t') + '\n';
  process.stdout.write(str, function() {
    process.exit(0);
  });
}

function handleError(err) {
  process.stderr.write(err.message + '\n', function() {
    process.exit(1);
  });
}

hashPDF(
  path.resolve(process.cwd(), commander.args[0]),
  commander.algorithm,
  commander.root
)
  .then(function(json) {
    if (execChainscript) {
      var hasAt = false;

      for (var i = 0; i < chainscriptArgs.length; i++) {
        var arg = chainscriptArgs[i];

        if (arg === '@') {
          chainscriptArgs[i] = JSON.stringify(json);
          hasAt = true;
        }
      }
      try {
        execFileSync(
          path.resolve(__dirname, './chainscript'),
          chainscriptArgs,
          {
            input: hasAt ? null : JSON.stringify(json),
            stdio: [
              hasAt ? process.stdin : 'pipe',
              process.stdout,
              process.stderr
            ]
          }
        );
      } catch(err) {
        handleError(err);
      }

      return;
    }
    
    handleOutput(json);
  })
  .catch(handleError);
