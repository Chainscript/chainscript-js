#!/usr/bin/env node
/*eslint-disable */

var path = require('path');
var commander = require('commander');
var Bitcore = require('bitcore');
var Chainscript = require(path.resolve(__dirname, '../lib'));

function run(cs) {

  function exec() {
    function postfix() {
      if(commander.notarize) {
        cs.notarize();
      }

      if(commander.email) {
        cs.email(commander.email);
      }

      cs
        .run()
        .then(function() {
          console.log(JSON.stringify(cs.toJSON(), null, '\t'));
          process.exit(0);
        }).fail(function(err) {
          console.error(err.message);
          process.exit(1);
        });
    }

    if(commander.update) {
      try {
        cs.update(JSON.parse(commander.update));
      } catch(e) {
        cs.update(commander.update);
      }
    }

    if(commander.snapshot) {
      cs.script.x_chainscript = cs.script.x_chainscript || {};
      cs.script.x_chainscript.snapshots_enabled = true;
      cs.snapshot();
    }

    if(commander.sign) {
      cs
        .run()
        .then(function() {
          cs.sign(commander.sign);
          postfix();
        }).fail(function(err) {
          console.error(err.message);
          process.exit(1);
        });

    } else {
      postfix();
    }
  }

  if (typeof cs.script.x_chainscript === 'undefined') {
    cs
      .run()
      .then(exec).fail(function(err) {
        console.error(err.message);
        process.exit(1);
      });
  } else {
    exec();
  }
}

commander
  .version('0.9.0')
  .usage('[options] <script | uuid>')
  .option('-u, --update <updates>', 'Update script')
  .option('-s, --snapshot', 'Snapshot script')
  .option('-n, --notarize', 'Notarize script')
  .option('-e, --email <email>', 'Email')
  .option('-S, --sign <wif>', 'Sign the digest')
  .option('-K, --genkey', 'Generate and print a key pair and address')
  .option('-T, --testnet', 'Use testnet')
  .parse(process.argv);

if (commander.genkey) {
  var privateKey = new Bitcore.PrivateKey();
  var publicKey = privateKey.toPublicKey();

  if (commander.testnet) {
    var address = publicKey.toAddress(Bitcore.Networks.testnet);
  } else {
    address = publicKey.toAddress(Bitcore.Networks.livenet);
  }

  console.log(JSON.stringify({
    private: privateKey.toWIF(),
    public: publicKey.toString(),
    address: address.toString()
  }, null, '\t'));

  process.exit(0);
}

if (!commander.args.length) {
  commander.outputHelp();
  process.exit(1);
}

if (commander.args[0].match(/^chainscript:/)) {
  Chainscript.load(commander.args[0])
    .then(run)
    .fail(function(err) {
      console.error(err.message);
      process.exit(1);
    });
} else {
  try {
    run (new Chainscript(JSON.parse(commander.args[0])));
  } catch (e) {
    commander.outputHelp();
    process.exit(1);
  }
}
